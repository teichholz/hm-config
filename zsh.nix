{ config, pkgs, lib,  ... }:


with lib;
{
  options = 
	{
		zsh.alias = mkOption {
			type = types.attrsOf (types.either types.str types.path);
			default = {};
		};


		zsh.path = mkOption { 
			type = types.envVar;
			default = ""; 
		};

		zsh.env = mkOption { 
			type = types.attrsOf (types.either types.str types.path);
			default = ""; 
		};

		zsh.rcInit = mkOption { 
			type = types.lines;
			default = ""; 
			description = ''
				Zsh lines to be written to $XDG_CONFIG_HOME/zsh/extra.zshrc and sourced by
				$XDG_CONFIG_HOME/zsh/.zshrc
				'';
		};

		zsh.envFiles = mkOption {
			type = types.listOf (types.either types.string types.path);
			default = [];
		};

	};

	config = {
		home.packages = with pkgs; [ 
			zsh fzf bat exa tree rsync parted fd ripgrep htop 
			tldr httpie ncdu jq glances pandoc nix-zsh-completions
			xdotool entr appimage-run feh fasd cargo nodePackages.npm nodejs
			direnv
		];

		zsh.path = builtins.toString (config.variables.configDir + /bin);

		zsh.alias = {
			dot = "home-manager switch --flake ${builtins.toString config.variables.home}/.config/nixpkgs#${config.home.username} --impure";
			test2 = "test2";
		};

		zsh.env = with config.systemd.user.sessionVariables; rec {
			ZDOTDIR = "${XDG_CONFIG_HOME}/zsh";
			ZSH_CACHE   = "${XDG_CACHE_HOME}/zsh";
      ZGEN_DIR    = "${XDG_DATA_HOME}/zsh";
      ZGEN_SOURCE = "${ZGEN_DIR}/zgen.zsh";
		};

		home.file.".zshenv".text = "source ${builtins.toString config.variables.configHome}/zsh/.zshenv";

		xdg.configFile = {
      # Write it recursively so other modules can write files to it
      "zsh" = { source = config.variables.configDir + /zsh; recursive = true; };

			"zsh/.zshenv".text = 
        let envVars = mapAttrsToList (n: v: "export ${n}=\"${v}\"") config.zsh.env; 
						aliasLines = mapAttrsToList (n: v: "alias ${n}=\"${v}\"") config.zsh.alias;
				in
			''
			    ## Environment
          ${concatStringsSep "\n" envVars}
					## Aliases
          ${concatStringsSep "\n" aliasLines}
					## Path 
					PATH=${config.zsh.path}:$PATH

 					## imperative config
					[[ -f "$HOME/.zshenv.extra" ]] && source "$HOME/.zshenv.extra"
			'';

      "zsh/extra.zshrc".text =
         ''
           # This file was autogenerated, do not edit it!
           ${config.zsh.rcInit}
        '';

    };

	};
}
